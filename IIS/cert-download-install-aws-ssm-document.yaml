---
schemaVersion: "2.2"
description: "This script will check for currently installed certificate on EC2 instance and in case of imminent expiration download newer version from S3 bucket, then apply it to IIS and related services."
parameters:
  CertCN:
    type: "String"
    description: "Cerificate base domain to check"
    default: "domain.com"
  S3bucket:
    type: "String"
    description: "S3 bucket with PFX file"
    default: "company-pfx-files"
  S3region:
    type: "String"
    description: "Region of S3 bucket with PFX file"
    default: "eu-west-1"
  DaysToExpiration:
    type: "String"
    description: "Don't do anything if certificate will expire in more that specified number of days"
    default: "31"
  SecretsManagerId:
    type: "String"
    description: "ARN of Secrets Manager's entry containing password for PFX file"
    default: "arn:aws:secretsmanager:eu-west-1:1111111111:secret:ec2/pfxpass/domain.com-XXXXXX"
mainSteps:
- action: "aws:runPowerShellScript"
  name: "MainStep"
  inputs:
    runCommand:
    - '$CertCN = "{{CertCN}}"'
    - '$S3BucketName = "{{S3bucket}}"'
    - '$S3Region = "{{S3region}}"'
    - '$DaysToExpiration = "{{DaysToExpiration}}"'
    - '$PFXpassARN = "{{SecretsManagerId}}"'
    - '$FileName = "$CertCN.pfx"'
    - '$PfxPassParameter = "$CertCN-pfxpass"'
    - '$WorkingDir = "$env:WINDIR\SSM-logs"'
    - '$LogFile = "$WorkingDir\$CertCN-install-log.txt"'
    - '$PfxFullPath = "$WorkingDir\$FileName"'
    - '$CertStore = "Cert:\LocalMachine"'
    - '[Net.ServicePointManager]::SecurityProtocol = "TLS12"'
    - '$PfxPassword = Get-SECSecretValue -SecretId $PFXpassARN -Select SecretString | ConvertFrom-Json | Select -ExpandProperty $PfxPassParameter'
    - '$SlackUri = "https://hooks.slack.com/services/XXXXXXXXXXXXXXXX"'
    - 'if (!(Test-Path $WorkingDir)) {New-Item -ItemType Directory -Force -Path $WorkingDir}'
    - '$expirationDate = (Get-Date).AddDays($DaysToExpiration)'
    - 'function Send-MessageToSlack {'
    - '        Param ('
    - '       [Parameter(Mandatory=$true)]'
    - '        [string] $SendSubject,'
    - '        [Parameter(Mandatory=$true)]'
    - '        [string] $SendBody'
    - '        )'
    - '        $body = ConvertTo-Json @{'
    - '                pretext = "$SendSubject"'
    - '                text = "$SendBody"'
    - '    }'
    - '     Invoke-RestMethod -Uri $SlackUri -Method Post -Body $body -ContentType "application/json" | Out-Null'
    - '}'
    - 'Function WriteLog {'
    - '	Param ('
    - '	[Parameter(Mandatory=$true)]'
    - '	[string] $Message'
    - '	)'
    - '	"$(Get-Date) - $Message" | Out-File $LogFile -Append -Encoding UTF8'
    - '}'
    - 'Function Convert-ByteArrayToHex {'
    - '    [cmdletbinding()]'
    - '    param('
    - '        [parameter(Mandatory=$true)]'
    - '        [Byte[]]'
    - '        $Bytes'
    - '    )'
    - '    $HexString = New-Object -TypeName "System.Text.StringBuilder" ($WMSVCCertBinaryHash.Length * 2)'
    - '    ForEach($byte in $Bytes){'
    - '        $HexString.AppendFormat("{0:x2}", $byte) | Out-Null'
    - '    }'
    - '    $HexString.ToString()'
    - '}'
    - '$CertCurrent = (Get-ChildItem -Path $CertStore\* -Exclude "Remote Desktop" | Where-Object {$_.Subject -match $CertCN} | Sort-Object -Property NotAfter -Descending | Select-Object -first 1)'
    - 'if ($CertCurrent -eq $null) {'
    - '	Return'
    - '	}'
    - 'if ( $CertCurrent.NotAfter -lt $expirationDate) {'
    - '	Write-Output "Time to check for new certificate!"'
    - '	} else {'
    - '	Write-Output "More than $DaysToExpiration days left to expire, no need to worry."'
    - '	Return'
    - '}'
    - 'try {'
    - 'Copy-S3Object -BucketName $S3BucketName -Key $FileName -LocalFile $PfxFullPath -Region $S3Region'
    - 'Import-Module WebAdministration'
    - 'try {'
    - '	$AllCerts = Get-WebBinding -Protocol "https" | ForEach-Object { $_.certificateHash}'
    - '	$CertBinded = Get-ChildItem -Path $CertStore\* -Exclude "Remote Desktop" | Where {$AllCerts -contains $_.Thumbprint -and $_.Subject -match $CertCN -and $_.Thumbprint -ne $CertCurrent.Thumbprint}'
    - '	if ($CertBinded -ne $null) {'
    - '		 Send-MessageToSlack -SendSubject "Warning!" -SendBody "Latest certificate for $($CertCN) on $($env:ComputerName) is not matched with binded in IIS! It will expire on $($CertBinded.NotAfter), latest - on $($CertCurrent.NotAfter)."'
    - '		}'
    - '	} catch {'
    - '	Send-MessageToSlack -SendSubject "Error comparing certificates at $($env:ComputerName)" -SendBody "$_.Exception.Message"'
    - '	Return'
    - '}'
    - '$CertNew = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2'
    - '$CertNew.Import($PfxFullPath, $PfxPassword, "PersistKeySet")'
    - '	} catch {'
    - '	WriteLog $_.Exception.Message'
    - '	Send-MessageToSlack -SendSubject "Failed to check new certificate at $($env:ComputerName)" -SendBody "$_.Exception.Message"'
    - '	Return'
    - '}'
    - 'if ( $CertNew.NotAfter -gt $CertCurrent.NotAfter ) {'
    - '	try {'
    - '    $PfxSecurePassword = $PfxPassword | ConvertTo-SecureString -AsPlainText -Force'
    - '    Import-PfxCertificate -Filepath $PfxFullPath -CertStoreLocation $CertStore\My -Password $PfxSecurePassword'
    - '    $NewCertThumbprint = $CertNew.Thumbprint'
    - '    $CurrentCertThumbprint = $CertCurrent.Thumbprint'
    - '    Get-WebBinding | Where-Object { $_.certificateHash -eq $CurrentCertThumbprint} | ForEach-Object {'
    - '        $_.AddSslCertificate($NewCertThumbprint, "My")'
    - '        }  -ErrorAction Stop'
    - '    $RDSModule = Get-Module -ListAvailable -Name RemoteDesktopServices'
    - '    if ($RDSModule -ne $null) {'
    - '	Import-Module $RDSModule'
    - '		if ((Get-Item -Path RDS:\GatewayServer\SSLCertificate\Thumbprint).CurrentValue -eq $CurrentCertThumbprint) {'
    - '			Set-Item -Path RDS:\GatewayServer\SSLCertificate\Thumbprint -Value $NewCertThumbprint'
    - '		}'
    - '	}'
    - '	$WMSVCRegPath = "HKLM:\SOFTWARE\Microsoft\WebManagement\Server"'
    - '    if (Test-Path $WMSVCRegPath) {'
    - '		$WMSVCCertBinaryHash = (Get-ItemProperty -Path $WMSVCRegPath -Name "SslCertificateHash").SslCertificateHash'
    - '		$WMSVCCertThumbprint = Convert-ByteArrayToHex $WMSVCCertBinaryHash'
    - '		if ($WMSVCCertThumbprint -eq $CurrentCertThumbprint) {'
    - '			$WebDeployService = Get-Service -Name WMSVC'
    - '			try {'
    - '				$WebDeployService.Stop()'
    - '				$WebDeployService.WaitForStatus("Stopped", "00:00:30")'
    - '			} catch {'
    - '				Stop-Process -Name "wmsvc" -Force'
    - '			}'
    - '			$webManagementPort = (Get-ItemProperty -Path $WMSVCRegPath -Name "Port").Port'
    - '			$webManagementIP = (Get-ChildItem -Path IIS:\SslBindings | Where-Object Port -eq $webManagementPort).IPAddress.IPAddressToString'
    - '			Get-ChildItem -Path IIS:\SslBindings | Where-Object Port -eq $webManagementPort | Where-Object IPAddress -eq $webManagementIP | Remove-Item -ErrorAction Stop'
    - '			Get-Item -Path $CertStore\My\$NewCertThumbprint | New-Item -Path IIS:\SslBindings\$webManagementIP!$webManagementPort -ErrorAction Stop'
    - '			$bytes = for($i = 0; $i -lt $NewCertThumbprint.Length; $i += 2) { [convert]::ToByte($NewCertThumbprint.SubString($i, 2), 16) }'
    - '			Set-ItemProperty -Path $WMSVCRegPath -Name SslCertificateHash -Value $bytes -ErrorAction Stop'
    - '			Start-Service $WebDeployService -ErrorAction Stop'
    - '		}'
    - '	}'
    - '    WriteLog "New certificate for $($CertCN) imported and applied successfully."'
    - '    Send-MessageToSlack -SendSubject "New cert at $($env:ComputerName)" -SendBody "Certificate for $CertCN imported and applied successfully."'
    - '	} catch {'
    - '	WriteLog $_.Exception.Message'
    - '	Send-MessageToSlack -SendSubject "Failed to apply new certificate at $($env:ComputerName)" -SendBody "$_.Exception.Message"'
    - '		}'
    - '    }'
    - 'else  {'
    - '    WriteLog "No new certificate for $($CertCN)"'
    - '	}'
    - 'if (Test-Path $PfxFullPath) {Remove-Item $PfxFullPath}'